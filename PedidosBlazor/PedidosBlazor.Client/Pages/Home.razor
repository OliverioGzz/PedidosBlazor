@page "/"
@using PedidosBlazor.Shared.Interfaces
@using PedidosBlazor.Shared.Models
@inject IPlatilloService PlatilloService
@inject IMesaService IMesaService
@inject IPedidoService PedidoService
@inject IJSRuntime JS

<PageTitle>Home</PageTitle>

<div class="container">
    <!-- Panel Pedido -->
    <div class="panel pedido-panel">
        <div class="pedido-header">
            <div class="pedido-titulo">
                <div class="pedido-actions" style="display:@(TienePedido ? "flex" : "none")">
                    <button class="limpiar-pedido-btn" @onclick="LimpiarPedidoConConfirmacion" aria-label="Limpiar pedido">Limpiar Pedido</button>
                    <button class="pagar-pedido-btn" @onclick="ProcesarPago" disabled="@Pagando">
                        @(Pagando ? "Procesando..." : "Pagar Pedido")
                    </button>
                </div>
            </div>

            <div class="pedido-info">
                <div>Mesa: <span>@(MesaSeleccionada?.Numero.ToString() ?? "-")</span></div>
                <div>Estado: <span>@(MesaSeleccionada?.Estado ?? "-")</span></div>
                @if (PedidoExistente != null)
                {
                    <div>Pedido ID: <span>#@PedidoExistente.Id</span></div>
                }
            </div>
        </div>

        <div class="items-pedido">
            @if (!ItemsPedidoActual.Any())
            {
                <div class="pedido-vacio">
                    <p>No hay items en el pedido</p>
                    <p class="instrucciones">Selecciona una mesa y agrega items del menú</p>
                </div>
            }
            else
            {
                @for (int i = 0; i < ItemsPedidoActual.Count; i++)
                {
                    var item = ItemsPedidoActual[i];
                    <div class="item-pedido">
                        <span class="nombre-item">@item.Platillo?.Nombre</span>
                        <div class="controles-cantidad">
                            <button @onclick="() => ModificarCantidad(i, item.Cantidad - 1)">-</button>
                            <span>@item.Cantidad</span>
                            <button @onclick="() => ModificarCantidad(i, item.Cantidad + 1)">+</button>
                        </div>
                        <span class="subtotal">@((item.Platillo?.Precio * item.Cantidad ?? 0).ToString("C2"))</span>
                        <button class="eliminar-item" @onclick="() => EliminarItemConConfirmacion(i)">×</button>
                    </div>
                }
            }
        </div>

        <div class="total-pedido">
            Total: @Total.ToString("C2")
        </div>

        <button class="enviar-pedido-btn"
                @onclick="EnviarPedido"
                disabled="@(!TienePedido || MesaSeleccionada == null || Cargando)">
            @(Cargando ? "Procesando..." : (PedidoExistente != null ? "Actualizar Pedido" : "Enviar Pedido"))
        </button>
    </div>

    <!-- Panel Menú -->
    <div class="panel menu-panel">
        <div class="menu-header">
            <button class="@(Vista == Vistas.Mesas ? "active" : "")" @onclick="() => CambiarVista(Vistas.Mesas)">Mesas</button>
            <button class="@(Vista == Vistas.Menu ? "active" : "")" @onclick="() => CambiarVista(Vistas.Menu)">Menú</button>
        </div>

        <div class="menu-content">
            @if (Vista == Vistas.Mesas)
            {
                <div class="grid-mesas">
                    @foreach (var mesa in Mesas)
                    {
                        var selected = MesaSeleccionada?.Id == mesa.Id;
                        <div class="mesa-item @(selected ? "selected" : "") @mesa.Estado.ToLower()" @onclick="() => SeleccionarMesa(mesa)">
                            <div class="numero-mesa">Mesa @mesa.Numero</div>
                            <div class="estado-mesa @mesa.Estado.ToLower()">@mesa.Estado</div>
                            @if (selected && PedidoExistente != null)
                            {
                                <div class="pedido-activo">Pedido Activo</div>
                            }
                        </div>
                    }
                </div>
            }
            else if (Vista == Vistas.Menu)
            {
                <div class="grid-menu">
                    @foreach (var p in Platillos)
                    {
                        <div class="platillo-item" @onclick="() => AgregarPlatillo(p)">
                            <h3>@p.Nombre</h3>
                            <div class="precio">@p.Precio.ToString("C2")</div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

@code {
    const int EMPLEADO_ID = 1;

    static class Vistas { public const string Mesas = "mesas"; public const string Menu = "menu"; }

    static class EstadosPedido
    {
        public const string Pendiente = "Pendiente";
        public const string Pagado = "Pagado";
    }

    List<Mesa> Mesas = new();
    List<Platillo> Platillos = new();
    List<ItemPedido> ItemsPedidoActual = new();
    Pedido? PedidoExistente;
    Mesa? MesaSeleccionada;
    string Vista = Vistas.Mesas;

    bool Cargando = false;
    bool Pagando = false;

    bool TienePedido => ItemsPedidoActual.Any();
    decimal Total => ItemsPedidoActual.Sum(i => i.Platillo?.Precio * i.Cantidad ?? 0);

    protected override async Task OnInitializedAsync()
    {
        if (PlatilloService != null)
        {
            await CargarMesas();
            await CargarPlatillos();
        }
    }

    async Task CargarMesas()
    {
        try { Mesas = await IMesaService.ObtenerTodasAsync(); }
        catch { await JS.InvokeVoidAsync("alert", "Error cargando mesas"); }
    }

    async Task CargarPlatillos()
    {
        try { Platillos = await PlatilloService.ObtenerTodosAsync(); }
        catch { await JS.InvokeVoidAsync("alert", "Error cargando platillos"); }
    }

    async Task CargarPedidoExistente(int mesaId)
    {
        try
        {
            var pedidos = await PedidoService.ObtenerPorMesaYEstadoAsync(mesaId, EstadosPedido.Pendiente);
            if (pedidos != null && pedidos.Any())
            {
                PedidoExistente = pedidos.First();
                ItemsPedidoActual = await PedidoService.ObtenerItemsPorPedidoIdAsync(PedidoExistente.Id);
            }
            else
            {
                PedidoExistente = null;
                ItemsPedidoActual = new List<ItemPedido>();
            }
        }
        catch
        {
            PedidoExistente = null;
            ItemsPedidoActual = new List<ItemPedido>();
            await JS.InvokeVoidAsync("alert", "Error cargando pedido existente");
        }
    }

    void CambiarVista(string nueva) => Vista = nueva;

    async Task SeleccionarMesa(Mesa mesa)
    {
        MesaSeleccionada = mesa;
        await CargarPedidoExistente(mesa.Id);
        Vista = Vistas.Menu;
    }

    void AgregarPlatillo(Platillo platillo)
    {
        if (MesaSeleccionada == null) return;

        var existente = ItemsPedidoActual.FirstOrDefault(i => i.PlatilloId == platillo.Id);
        if (existente != null) existente.Cantidad++;
        else ItemsPedidoActual.Add(new ItemPedido { PlatilloId = platillo.Id, Platillo = platillo, Cantidad = 1 });
    }

    void ModificarCantidad(int index, int nuevaCantidad)
    {
        if (nuevaCantidad < 1) _ = EliminarItemConConfirmacion(index);
        else if (index >= 0 && index < ItemsPedidoActual.Count) ItemsPedidoActual[index].Cantidad = nuevaCantidad;
    }

    async Task EliminarItemConConfirmacion(int index)
    {
        if (index >= 0 && index < ItemsPedidoActual.Count)
        {
            bool confirmado = await JS.InvokeAsync<bool>("confirm", "¿Deseas eliminar este item del pedido?");
            if (confirmado) ItemsPedidoActual.RemoveAt(index);
        }
    }

    async Task LimpiarPedidoConConfirmacion()
    {
        if (!TienePedido) return;
        bool confirmado = await JS.InvokeAsync<bool>("confirm", "¿Deseas limpiar todo el pedido?");
        if (confirmado)
        {
            ItemsPedidoActual.Clear();
            PedidoExistente = null;
        }
    }

    async Task EnviarPedido()
    {
        if (MesaSeleccionada == null || !TienePedido)
        {
            await JS.InvokeVoidAsync("alert", "Selecciona una mesa y agrega items al pedido");
            return;
        }

        Cargando = true;

        try
        {
            if (PedidoExistente != null)
            {
                PedidoExistente.Items = ItemsPedidoActual;
                await PedidoService.ActualizarAsync(PedidoExistente);
                await JS.InvokeVoidAsync("alert", "Pedido actualizado exitosamente");
                await CargarMesas();
            }
            else
            {
                var nuevoPedido = new Pedido
                {
                    MesaId = MesaSeleccionada.Id,
                    EmpleadoId = EMPLEADO_ID,
                    Estado = EstadosPedido.Pendiente,
                    Fecha = DateTime.Now,
                    Items = ItemsPedidoActual
                };

                PedidoExistente = await PedidoService.CrearAsync(nuevoPedido);
                await JS.InvokeVoidAsync("alert", "Pedido enviado exitosamente");
                await CargarMesas();
            }
        }
        catch
        {
            await JS.InvokeVoidAsync("alert", "Error enviando pedido");
        }
        finally { Cargando = false; }
    }

    async Task ProcesarPago()
    {
        if (PedidoExistente == null)
        {
            await JS.InvokeVoidAsync("alert", "No hay un pedido existente para pagar. Primero envía el pedido.");
            return;
        }
        if (!TienePedido)
        {
            await JS.InvokeVoidAsync("alert", "El pedido está vacío.");
            return;
        }

        bool confirmado = await JS.InvokeAsync<bool>("confirm", "¿Deseas registrar el pago de este pedido?");
        if (!confirmado) return;

        Pagando = true;
        try
        {
            PedidoExistente.Estado = EstadosPedido.Pagado;
            PedidoExistente.Items = ItemsPedidoActual;
            await PedidoService.ActualizarAsync(PedidoExistente);

            await JS.InvokeVoidAsync("alert", "Pago registrado correctamente.");
            await CargarMesas();
            ItemsPedidoActual.Clear();
            PedidoExistente = null;
        }
        catch
        {
            await JS.InvokeVoidAsync("alert", "Error procesando pago.");
        }
        finally { Pagando = false; }
    }
}
